<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Productos en tiempo real</title>
  </head>
  <body>
    <h1>Listado de productos en tiempo real</h1>
    <ul id="productList">
    </ul>


<form id="createProductForm">
  <label><b>Nombre del producto</b></label><br />
  <input type="text" id="productName" placeholder="Nombre del producto" /><br /><br />
  
  <label><b>Descripción del producto</b></label><br />
  <input type="text" id="description" placeholder="Descripción del producto" /><br /><br />

  <label><b>Código del producto</b></label><br />
  <input type="text" id="productCode" placeholder="Código del producto" /><br /><br />

  <label><b>Precio</b></label><br />
  <input type="number" id="price" placeholder="Precio" /><br /><br />

  <label><b>Estado</b></label><br />
  <select id="status">
    <option value="true">Disponible</option>
    <option value="false">No disponible</option>
  </select><br /><br />

  <label><b>Stock</b></label><br />
  <input type="number" id="stock" placeholder="Stock" /><br /><br />

  <label><b>Categoría</b></label><br />
  <input type="text" id="category" placeholder="Categoría" /><br /><br />

  <label for="thumbnails"><b>Imágenes del producto</b></label><br />
  <input type="file" id="thumbnails" multiple accept="image/*" /><br /><br />

  <button type="submit">Crear producto</button>
</form>

 <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    document.getElementById('createProductForm').addEventListener('submit', (event) => {
      event.preventDefault();
      const productName = document.getElementById('productName').value;
      const description = document.getElementById('description').value;
      const productCode = document.getElementById('productCode').value;
      const price = document.getElementById('price').value;
      const status = document.getElementById('status').value === 'true';
      const stock = document.getElementById('stock').value;
      const category = document.getElementById('category').value;
      // Obtener miniaturas seleccionadas
      const files = document.getElementById('thumbnails').files;
      const thumbnails = []
      for (let i = 0; i < files.length; i++) {
        thumbnails.push(files[i].name); // Agregar solo el nombre del archivo
      }
      
      // Creamos un objeto con los valores recolectados
      const productData = {
        title: productName,
        description: description,
        code: productCode,
        price: parseFloat(price),
        status: status,
        stock: parseInt(stock),
        category: category,
        thumbnails: thumbnails  // Añadimos las miniaturas al objeto
      };
      socket.emit('createProduct', productData);
    });

      function removeProductFromList(productId) {
      const productElement = document.getElementById(productId);
      if (productElement) {
        productElement.remove(); // Eliminar el elemento de la lista
      }
    }

    // Escuchar el evento de clic en los botones de eliminar productos
    function setupProductDeleteButtons() {
      const deleteButtons = document.querySelectorAll('.delete-button');
      deleteButtons.forEach(button => {
        button.addEventListener('click', () => {
          const productId = button.dataset.productId; // Obtener el ID del producto
          // Emitir el evento de eliminar producto al backend
          socket.emit('deleteProduct', productId);
          // Eliminar el producto de la lista visualmente
          removeProductFromList(productId);
        });
      });
    }

    // Escuchar el evento de creación de productos
    socket.on('productCreated', (product) => {
      const productList = document.getElementById('productList');
      const li = document.createElement('li');
      li.id = product.id; // Asignar el ID del producto como ID del elemento de lista
      li.textContent = JSON.stringify(product); // Mostrar el objeto JSON del producto
      // Crear un botón de eliminar para este producto
      const deleteButton = document.createElement('button');
      deleteButton.textContent = 'Eliminar';
      deleteButton.classList.add('delete-button');
      deleteButton.dataset.productId = product.id; // Asignar el ID del producto al botón
      li.appendChild(deleteButton); // Agregar el botón de eliminar al elemento de lista
      productList.appendChild(li);
      // Configurar los botones de eliminar
      setupProductDeleteButtons();
    });

    // Capturamos el evento de cambio en el campo de entrada de las miniaturas
    document.getElementById('thumbnails').addEventListener('change', function() {
      // Obtener el campo de entrada de las miniaturas
      var input = this;
      // Obtener el label asociado al campo de entrada de las miniaturas
      var label = document.getElementById('thumbnailsLabel');
      // Verificar si se seleccionó al menos un archivo
      if (input.files.length > 0) {
        // Mostrar el nombre del primer archivo seleccionado en el label
        label.textContent = 'Imagen seleccionada: ' + input.files[0].name;
      } else {
        // Si no se seleccionó ningún archivo, limpiar el contenido del label
        label.textContent = '';
      }
    });
  </script>
  
</html>